#pragma once
#ifndef M_PI
#define M_PI (3.14159265358979323846)
#endif
#include <math.h> //atan

#include "point.hpp"
#include "segment.hpp"

#include <iostream>

class vector : public point {

    double x{};
    double y{};
    static unsigned int counter_v;
    const unsigned int id{++counter_v};

protected:

    double setX(double x)
    {
        return this->x=x;
    }

    ///////////////////////////////////////////////////////////////////////////

    double setY(double y)
    {
        return this->y = y;
    }

    ///////////////////////////////////////////////////////////////////////////

public:

    vector();
    vector(double, double, double, double);
    vector(double, double);
    vector(point, point);
    vector(const vector &obj);
    vector(vector *obj);
    vector(segment);

    ///////////////////////////////////////////////////////////////////////////

    virtual unsigned int get_id()
    {
        return id;
    }

    ///////////////////////////////////////////////////////////////////////////

    double getY() 
    {
        return this->y;
    }
    
    ///////////////////////////////////////////////////////////////////////////

    double getX() 
    {
        return this->x;
    }

    ///////////////////////////////////////////////////////////////////////////

    double getAngleRad()
    {
        return atan2l( x, y );
    }
    ///////////////////////////////////////////////////////////////////////////
    double getAngleDeg();
    ///////////////////////////////////////////////////////////////////////////
    double getMagnitude()
    {
        return sqrtl(powl(x,2) + powl(y,2));
    }
    ///////////////////////////////////////////////////////////////////////////
    double getAngle2vectors(vector x);
    ///////////////////////////////////////////////////////////////////////////
    friend std::ostream & operator<<(std::ostream & , vector &);
    ///////////////////////////////////////////////////////////////////////////
    virtual void show();
    ///////////////////////////////////////////////////////////////////////////
    static void show(vector *);
    ///////////////////////////////////////////////////////////////////////////
    vector* operator+(vector);
    ///////////////////////////////////////////////////////////////////////////
    virtual ~vector();
};

